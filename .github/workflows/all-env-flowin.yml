# Flow in all environments (pull the metadata from Salesforce into Git).
# This workflow consists of two jobs:
# - The first runs `orgflow env:list` and transforms the output into a matrix for GitHub actions.
# - The second uses the matrix created in the first step to tun `orgflow env:flowin` for all the environments.

name: Flow in all environments
on:
  schedule:
    - cron:  '0 1 * * *' # Runs nightly at 1am.
  workflow_dispatch: # Can also be manually triggered, if needed.

# The env:flowin command needs to be able to push changes back to the repo.
permissions:
  contents: write  

jobs:
  create-matrix:
    name: "Get Environments"
    runs-on: ubuntu-latest    
    container: 
      image: orgflow/cli:latest
    env:
      ORGFLOW_ACCEPTEULA: true # If someone has a license key then they've already accepted the EULA.
      ORGFLOW_STACKNAME: ${{ secrets.ORGFLOW_STACKNAME }}      
      ORGFLOW_LICENSEKEY: ${{ secrets.ORGFLOW_LICENSEKEY }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    # Use jq to transform the output from env:list into the format expected for a matrix strategy:
    - id: set-matrix
      run: echo "::set-output name=matrix::`orgflow env:list --output=json | jq '[.[] | .name]' -c`"
      
  flow-in:
    name: "Flow In Environment"
    needs: create-matrix
    runs-on: ubuntu-latest    
    container: 
      image: orgflow/cli
    env:
      ORGFLOW_ACCEPTEULA: true # If someone has a license key then they've already accepted the EULA.
      ORGFLOW_STACKNAME: ${{ secrets.ORGFLOW_STACKNAME }}      
      ORGFLOW_LICENSEKEY: ${{ secrets.ORGFLOW_LICENSEKEY }}   
      SALESFORCE_USERNAME: ${{ secrets.SALESFORCE_USERNAME }}
      SALESFORCE_PASSWORD: ${{ secrets.SALESFORCE_PASSWORD }} 
    strategy:
      fail-fast: false # If one environment fails, don't allow GitHub to cancel the jobs for all the rest. 
      matrix: 
        environmentName: ${{fromJson(needs.create-matrix.outputs.matrix)}}
          
    steps:
      # Verify input:
      - name: Verify stack name
        id: verifyStackName
        if: ${{ always() && env.ORGFLOW_STACKNAME == '' }}
        run: |
          echo 'Repository secret ORGFLOW_STACKNAME has not been set. See the readme for more details.'
          exit 1
      - name: Verify license key
        id: verifyLicenseKey
        if: ${{ always() && env.ORGFLOW_LICENSEKEY == '' }}
        run: |
          echo 'Repository secret ORGFLOW_LICENSEKEY has not been set. See the readme for more details.'
          exit 1
      - name: Verify Salesforce username
        id: verifySalesforceUsername
        if: ${{always() && env.SALESFORCE_USERNAME == '' }}
        run: |
          echo 'Repository secret SALESFORCE_USERNAME has not been set. See the readme for more details.'
          exit 1
      - name: Verify Salesforce password
        id: verifySalesforcePassword
        if: ${{always() && env.SALESFORCE_PASSWORD == '' }}
        run: |
          echo 'Repository secret SALESFORCE_PASSWORD has not been set. See the readme for more details.'
          exit 1
          
      # Configure Git:
      - uses: orgflow-actions/configure-git@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Configure auth:
      - uses: orgflow-actions/set-salesforce-auth@v1
        with:
          stack-name: ${{ secrets.ORGFLOW_STACKNAME }}
          username: ${{ secrets.SALESFORCE_USERNAME }}
          password: ${{ secrets.SALESFORCE_PASSWORD }}
          license-key: ${{ secrets.ORGFLOW_LICENSEKEY }}       
          
      # Run OrgFlow command:
      - name: env:flowin
        run: |
          orgflow env:flowin -e="${{ matrix.environmentName }}"
      
      # Publish diagnostic bundles to artifacts (if any):
      - name: Publish diagnostic bundle as artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Diagnostic Bundles
          path: |
            /tmp/OrgFlow_Diagnostics_*.zip
          retention-days: 3
          if-no-files-found: ignore
