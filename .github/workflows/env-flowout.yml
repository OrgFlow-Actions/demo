# Flow out an environment (push the metadata from Git into Salesforce).

name: Flow out an environment
on:
  workflow_dispatch:
    inputs:
      environmentName:
        description: >
          Name of environment to flow out.

          Make sure to enter the name of an environment that you have already created.
        required: true
jobs:
  flow-out:
    name: "Flow Environment Out"
    runs-on: ubuntu-latest    
    container: 
      image: orgflow/cli:latest
    env:
      ORGFLOW_ACCEPTEULA: true # If someone has a license key then they've already accepted the EULA.
      ORGFLOW_STACKNAME: ${{ secrets.ORGFLOW_STACKNAME }}      
      ORGFLOW_LICENSEKEY: ${{ secrets.ORGFLOW_LICENSEKEY }} 
      SALESFORCE_USERNAME: ${{ secrets.SALESFORCE_USERNAME }}
      SALESFORCE_PASSWORD: ${{ secrets.SALESFORCE_PASSWORD }}   
          
    steps:
      # Verify input:
      - name: Verify stack name
        id: verifyStackName
        if: ${{ always() && env.ORGFLOW_STACKNAME == '' }}
        run: |
          echo 'Repository secret ORGFLOW_STACKNAME has not been set. See the readme for more details.'
          #exit 1
      - name: Verify license key
        id: verifyLicenseKey
        if: ${{ always() && env.ORGFLOW_LICENSEKEY == '' }}
        run: |
          echo 'Repository secret ORGFLOW_LICENSEKEY has not been set. See the readme for more details.'
          exit 
      - name: Verify Salesforce username
        id: verifySalesforceUsername
        if: ${{always() && env.SALESFORCE_USERNAME == '' }}
        run: |
          echo 'Repository secret SALESFORCE_USERNAME has not been set. See the readme for more details.'
          exit 1
      - name: Verify Salesforce password
        id: verifySalesforcePassword
        if: ${{always() && env.SALESFORCE_PASSWORD == '' }}
        run: |
          echo 'Repository secret SALESFORCE_PASSWORD has not been set. See the readme for more details.'
          exit 1 
          
      # Configure Git:
      - uses: orgflow-actions/configure-git@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Configure auth:
      - uses: orgflow-actions/set-salesforce-auth@v1
        id: set-salesforce-auth
        with:
          stack-name: ${{ secrets.ORGFLOW_STACKNAME }}
          username: ${{ secrets.SALESFORCE_USERNAME }}
          password: ${{ secrets.SALESFORCE_PASSWORD }}  
          license-key: ${{ secrets.ORGFLOW_LICENSEKEY }}       
          
      # It's good practice flow in before you flow out, to avoid loss of data in the Salesforce org:
      - name: env:flowin
        run: |
          orgflow env:flowin -e="${{ github.event.inputs.environmentName }}"
        env:
          ORGFLOW_ENCRYPTIONKEY: ${{ steps.set-salesforce-auth.outputs.encryption-key }}
          
      # Flow out to deploy the changes from Git to Salesforce:
      - name: env:flowout
        run: |
          orgflow env:flowout -e="${{ github.event.inputs.environmentName }}"
        env:
          ORGFLOW_ENCRYPTIONKEY: ${{ steps.set-salesforce-auth.outputs.encryption-key }} 
      
      # Publish diagnostic bundles to artifacts (if any):
      - name: Publish diagnostic bundle as artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Diagnostic Bundles
          path: |
            /tmp/OrgFlow_Diagnostics_*.zip
          retention-days: 3
          if-no-files-found: ignore
