# Flow out an environment (push the metadata from Git into Salesforce).

name: Flow out an environment
on:
  push:
    branches-ignore: [ production ] # Remove this line to enable deployments to production. Note- we assume that the production environment is backed by a branch called `production`; if this is not the case, then you'll need to update this value.
        
jobs:
  flow-out:
    name: "Flow Environment Out"
    runs-on: ubuntu-latest    
    container: 
      image: orgflow/cli:latest
    env:
      ORGFLOW_ACCEPTEULA: true # If someone has a license key then they've already accepted the EULA.
      ORGFLOW_STACKNAME: ${{ secrets.ORGFLOW_STACKNAME }}      
      ORGFLOW_LICENSEKEY: ${{ secrets.ORGFLOW_LICENSEKEY }} 
      SALESFORCE_USERNAME: ${{ secrets.SALESFORCE_USERNAME }}
      SALESFORCE_PASSWORD: ${{ secrets.SALESFORCE_PASSWORD }}   
          
    steps:
      # Verify input:
      - name: Verify stack name
        id: verifyStackName
        if: ${{ always() && env.ORGFLOW_STACKNAME == '' }}
        run: |
          echo 'Repository secret ORGFLOW_STACKNAME has not been set. See the readme for more details.'
          #exit 1
      - name: Verify license key
        id: verifyLicenseKey
        if: ${{ always() && env.ORGFLOW_LICENSEKEY == '' }}
        run: |
          echo 'Repository secret ORGFLOW_LICENSEKEY has not been set. See the readme for more details.'
          exit 
      - name: Verify Salesforce username
        id: verifySalesforceUsername
        if: ${{always() && env.SALESFORCE_USERNAME == '' }}
        run: |
          echo 'Repository secret SALESFORCE_USERNAME has not been set. See the readme for more details.'
          exit 1
      - name: Verify Salesforce password
        id: verifySalesforcePassword
        if: ${{always() && env.SALESFORCE_PASSWORD == '' }}
        run: |
          echo 'Repository secret SALESFORCE_PASSWORD has not been set. See the readme for more details.'
          exit 1
          
      # Get the branch name that triggered this action, and format it in a way that OrgFlow can understand it:
      - id: get-branch
        name: Get branch name
        run: echo "BRANCHNAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          
      # Use jq to scan the output from env:list to retrieve the environment name based on the branch:
      - id: get-environment
        name: Get OrgFlow environment from branch name
        run: echo ORGFLOW_ENVIRONMENT=`orgflow env:list --output=json | jq '.[] | select(.git.branch == env.BRANCHNAME) | .name'` >> $GITHUB_ENV

      # Print a message if there is no environment for this branch:
      - id: environment-check
        name: Print if this branch is not related to an environment
        if: ${{ env.ORGFLOW_ENVIRONMENT == '' }}
        run: echo "Branch '$BRANCHNAME' does not belong to any environment on this stack."      
          
      # Configure Git:
      - uses: orgflow-actions/configure-git@v0.4
        if: ${{ env.ORGFLOW_ENVIRONMENT != '' }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Configure auth:
      - uses: orgflow-actions/set-salesforce-auth@v0.2
        if: ${{ env.ORGFLOW_ENVIRONMENT != '' }}
        with:
          username: ${{ secrets.SALESFORCE_USERNAME }}
          password: ${{ secrets.SALESFORCE_PASSWORD }}        
          
      # It's good practice flow in before you flow out, to avoid loss of data in the Salesforce org:
      - name: env:flowin
        if: ${{ env.ORGFLOW_ENVIRONMENT != '' }}
        run: |
          orgflow env:flowin -e="$ORGFLOW_ENVIRONMENT"
          
      # Flow out to deploy the changes from Git to Salesforce:
      - name: env:flowout
        if: ${{ env.ORGFLOW_ENVIRONMENT != '' }}
        run: |
          orgflow env:flowout -e="$ORGFLOW_ENVIRONMENT" --checkOnly      
      
      # Publish diagnostic bundles to artifacts (if any):
      - name: Publish diagnostic bundle as artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Diagnostic Bundles
          path: |
            /tmp/OrgFlow_Diagnostics_*.zip
          retention-days: 3
          if-no-files-found: ignore
