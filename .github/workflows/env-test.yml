# Run the tests in the Salesforce org for a particular environment, and then publish the results.

name: Run tests
on:
  # This action must be manually executed.
  workflow_dispatch:
    inputs:
      environmentName:
        description: 'Name of the environment to run tests for.'
        required: true

jobs:
  env-test:
    name: Run Tests
    runs-on: ubuntu-latest    
    container: 
      image: orgflow/cli:latest
      env:
        ORGFLOW_ACCEPTEULA: true # If someone has a license key then they've already accepted the EULA.
        ORGFLOW_STACKNAME: ${{ secrets.ORGFLOW_STACKNAME }}      
        ORGFLOW_LICENSEKEY: ${{ secrets.ORGFLOW_LICENSEKEY }} 
        SALESFORCE_USERNAME: ${{ secrets.SALESFORCE_USERNAME }}
        SALESFORCE_PASSWORD: ${{ secrets.SALESFORCE_PASSWORD }}  
        ORGFLOW_OUTPUTTEMPLATE_WARNING: "::warning  title=OrgFlow Warning::$$msg$$"
        ORGFLOW_OUTPUTTEMPLATE_ERROR: "::error title=OrgFlow Error::$$msg$$"

    steps:
      # Verify input:
      - name: Verify input
        id: verifyInput
        run: |
          if ["$ORGFLOW_STACKNAME" == ""]; then echo "::error tile=Missing input value::Repository secret ORGFLOW_STACKNAME has not been set. See the readme for more details." && exit 1; fi;
          if ["$ORGFLOW_LICENSEKEY" == ""]; then echo "::error tile=Missing input value::Repository secret ORGFLOW_LICENSEKEY has not been set. See the readme for more details." && exit 1; fi;
          if ["$SALESFORCE_USERNAME" == ""]; then echo "::error tile=Missing input value::Repository secret SALESFORCE_USERNAME has not been set. See the readme for more details." && exit 1; fi;
          if ["$SALESFORCE_PASSWORD" == ""]; then echo "::error tile=Missing input value::Repository secret SALESFORCE_PASSWORD has not been set. See the readme for more details." && exit 1; fi;
          
      # Add the environment name to the environment variables so that jq can use it:
      - id: get-branch
        name: Get branch name
        run: echo "ORGFLOW_ENVIRONMENT=${{ github.event.inputs.environmentName }}" >> $GITHUB_ENV
          
      # Use jq to scan the output from env:list to retrieve the environment name based on the branch:
      - id: get-sha
        name: Get commit hash for environment
        run: echo ORGFLOW_SHA=`orgflow env:list --output=json | jq '.[] | select(.name == env.ORGFLOW_ENVIRONMENT) | .git.parityHash'` >> $GITHUB_ENV

      # The test results publisher requires that the repository is checked out:
      - uses: actions/checkout@v2 
        name: Checkout at hash for environment

      # Configure auth:
      - uses: orgflow-actions/set-salesforce-auth@v1
        id: set-salesforce-auth
        with:
          stack-name: ${{ secrets.ORGFLOW_STACKNAME }}
          username: ${{ secrets.SALESFORCE_USERNAME }}
          password: ${{ secrets.SALESFORCE_PASSWORD }} 
          license-key: ${{ secrets.ORGFLOW_LICENSEKEY }} 
      
      # Run OrgFlow command:
      - name: env:test
        run: orgflow env:test -e="${{ github.event.inputs.environmentName }}" --jUnitTo="${{ env.RUNNER_TEMP }}junit.xml"
        env:
          ORGFLOW_ENCRYPTIONKEY: ${{ steps.set-salesforce-auth.outputs.encryption-key }}

      # Publish the test results using an action from the marketplace:
      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: ${{ env.RUNNER_TEMP }}junit.xml
          reporter: java-junit
      
      # Publish diagnostic bundles to artifacts (if any):
      - name: Publish diagnostic bundle as artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Diagnostic Bundles
          path: |
            /tmp/OrgFlow_Diagnostics_*.zip
            ${{ env.RUNNER_TEMP }}junit.xml
          retention-days: 3
          if-no-files-found: ignore
      
