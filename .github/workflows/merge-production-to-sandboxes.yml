# Merge production into all sandboxes (sometimes called "upstream merge" or "back promotion")

# This workflow consists of three jobs:
# - The first runs 'orgflow env:list' to find environments tagged with 'upstreamMergeTarget' and transforms the output into a matrix
# - The second runs 'orgflow env:flowin' to commit metadata changes into Git from your production Salesforce org
# - The third uses the matrix created in the first step to run 'orgflow env:flowmerge' to merge production into each environment in the matrix

name: Merge production into all sandboxes

on:
  # Uncomment to run this workflow on a schedule:
  #schedule:
  #  - cron: "0 1 * * *" # Runs nightly at 01:00 UTC.
  workflow_dispatch: # Can also be manually triggered, if needed.
  
# This action uses GitHub's built in token authentication for Git repositories.  
# Read more at https://docs.github.com/en/actions/security-guides/automatic-token-authentication.
permissions:
  # Ensure that OrgFlow can push changes back to the remote repository:
  contents: write

jobs:
  create-matrix:
    name: List target environments
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      # Verify secrets:
      - name: Verify secrets
        run: |
          if ["${{ secrets.ORGFLOW_STACKNAME }}" == ""]; then echo "::error title=Missing input value::Repository secret ORGFLOW_STACKNAME has not been set. See the Readme for more details." && exit 1; fi;
          if ["${{ secrets.ORGFLOW_LICENSEKEY }}" == ""]; then echo "::error title=Missing input value::Repository secret ORGFLOW_LICENSEKEY has not been set. See the Readme for more details." && exit 1; fi;
          if ["${{ secrets.SALESFORCE_USERNAME }}" == ""]; then echo "::error title=Missing input value::Repository secret SALESFORCE_USERNAME has not been set. See the Readme for more details." && exit 1; fi;
          if ["${{ secrets.SALESFORCE_PASSWORD }}" == ""]; then echo "::error title=Missing input value::Repository secret SALESFORCE_PASSWORD has not been set. See the Readme for more details." && exit 1; fi;

      # Install and configure OrgFlow:
      - name: Install OrgFlow
        uses: orgflow-actions/setup@v1
        with:
          version: 1
          license-key: ${{ secrets.ORGFLOW_LICENSEKEY }}
          stack-name: ${{ secrets.ORGFLOW_STACKNAME }}
        env:
          ORGFLOW_ACCEPTEULA: "true"

      # Use jq to transform the output from env:list into the format expected for a matrix strategy:
      - name: Create matrix
        id: set-matrix
        run: echo "matrix=`orgflow env:list --withTags="upstreamMergeTarget" --output=json --nameOnly`" >> $GITHUB_OUTPUT

  env-flowin:
    # Flow in production once, so that we don't need to do it for every environment in the matrix.
    name: Flow in production
    runs-on: ubuntu-latest

    steps:
      # Install and configure OrgFlow:
      - name: Install OrgFlow
        uses: orgflow-actions/setup@v1
        with:
          version: 1
          license-key: ${{ secrets.ORGFLOW_LICENSEKEY }}
          salesforce-username: ${{ secrets.SALESFORCE_USERNAME }}
          salesforce-password: ${{ secrets.SALESFORCE_PASSWORD }}
          git-username: ${{ github.actor }}
          git-password: ${{ secrets.GITHUB_TOKEN }}
          stack-name: ${{ secrets.ORGFLOW_STACKNAME }}
        env:
          ORGFLOW_ACCEPTEULA: "true"

      # Run OrgFlow command:
      - name: Run env:flowin
        run: |
          orgflow env:flowin --environment="Production" --waitForLock=5

  env-flowmerge:
    name: Merge production into envrironment
    needs: [ create-matrix, env-flowin ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Even if an environment fails, do the rest.
      matrix:
        environmentName: ${{ fromJson(needs.create-matrix.outputs.matrix) }}

    steps:
      # Install and configure OrgFlow:
      - name: Install OrgFlow
        uses: orgflow-actions/setup@v1
        with:
          version: 1
          license-key: ${{ secrets.ORGFLOW_LICENSEKEY }}
          salesforce-username: ${{ secrets.SALESFORCE_USERNAME }}
          salesforce-password: ${{ secrets.SALESFORCE_PASSWORD }}
          git-username: ${{ github.actor }}
          git-password: ${{ secrets.GITHUB_TOKEN }}
          stack-name: ${{ secrets.ORGFLOW_STACKNAME }}
          # Ensure artifact names are unique:
          diag-artifact-name: orgflow_diag_${{ github.job }}_${{ matrix.environmentName }}_${{ github.run_attempt }}
        env:
          ORGFLOW_ACCEPTEULA: "true"

      # Run OrgFlow command:
      - name: Run env:flowmerge
        run: |
          orgflow env:flowmerge --from="Production" --into="${{ matrix.environmentName }}" --noSourceIn --waitForLock=5
